                             CURSOR
                            ========

->Cursor is a private sql memory area which is used to process
->multiple records and also this is an record by record process.


  *         /To process multiple records.
 *** CURSOR
  *         \record by record process.


    Oracle having two types of static cursors. These are
1)Implicit cursor
2)Explicit cursor

2)Explicit cursor:-For sql statements return multiple records is 
=================  called explicit cursor. Explicit cursor memory area
                   is also called  as "active set area".in explicit
cursor internally having record by record process.

Explicit cursor life cycle
==========================
       Every explicit cursor having following 4 step process. 
These are.

1)declare
2)open
3)fetch
4)close

1)Declare:-in declare section of the pl/sql block we are declaring
=========  the cursor by using following syntax.

syntax:-
=======
cursor cursorname is select * from tablename
where condition;

ex:-
===
SQL>declare
    cursor c1 is select * from emp
    where job='CLERK';

2)open:-Whenever we are opening the cursor then only 
======= oracle server retrieve data from table into 
cursor memory area because in all relational databases
whenever we are opening the cursor then only cursor
select statement is executed.

syntax:-
======
open cursorname;

    This statement is used in executable section of
the pl/sql block.

NOTE:-Every cursor memory area internally having a pointer whenever
====  we are opening the cursor. This cursor pointer always points
      to first record in cursor memory area.

3)fetch:-(fetching data from cursor memory area)
================================================
  By using fetch statement we are fetching data from cursor memory
area into pl/sql variables

syntax:-
=======
fetch cursorname into variablename1,variablename2;

4)close:-Whenever we are closing the cursor then automatically all
======== the resources are allocated from cursor memory area is 
         automatically released.

syntax:-
=======
close cursorname;


--------------------------------------------------------------------------

1.Write a pl/sql explicit cursor program which is used to display 
  all employee names and their salaries from emp table 
  by using %notfound attribute?

1)%notfound:-This attribute always returns Boolean value either
             true or false. This attribute returns true whenever 
             fetch stmt does not fetches any row from cursor memory
             area.
Where as it returns false when fetch stmt fetches atleast one row 
from cursor memory are.

syntax:-
=======
cursorname%notfound;

--------------------------------------------------------------------------

2.Write a pl/sql cursor program which is used to display total salary 
        from emp table without using sum() function ?



--------------------------------------------------------------------------
3.Write a PL/SQL Block:(Proounce Solutions Pvt.Ltd)

  -Use a cursor to fetch all unprocessed employees(processed='N') from employee_bonus.

  -If bonus_amount<1000,increase bonus by 20% otherwise incrase by 10%.

  -Update the employee_bonus table with the new bonus and set processed='Y'.

  -After processing all rows,delete all rows from employee_bonus where bonus_amount>5000.


CREATE TABLE EMPLOYEE_BONUS
   (
   EMPID NUMBER(5),
   ENAME VARCHAR2(10),
   BONUS_AMOUNT NUMBER(6),
   PROCESSED VARCHAR2(10)
   );

 INSERT INTO EMPLOYEE_BONUS VALUES(101,'ALICE',800,'N');
 INSERT INTO EMPLOYEE_BONUS VALUES(102,'BOB',1000,'N');
 INSERT INTO EMPLOYEE_BONUS VALUES(103,'JOHN',2000,'N');
 INSERT INTO EMPLOYEE_BONUS VALUES(104,'CHARLIE',900,'Y');
 INSERT INTO EMPLOYEE_BONUS VALUES(105,'DAVID',6000,'N');
 INSERT INTO EMPLOYEE_BONUS VALUES(106,'FRANK',7000,'Y');

COMMIT;

SQL>SELECT * FROM EMPLOYEE_BONUS;
 
       EMPID    ENAME      BONUS_AMOUNT  PROCESSED
    --------  ----------   ------------  ----------
       101     ALICE            800         N
       102     BOB              1000        N
       103     JOHN             2000        N
       104     CHARLIE          900         Y
       105     DAVID            6000        N
       106     FRANK            7000        Y



